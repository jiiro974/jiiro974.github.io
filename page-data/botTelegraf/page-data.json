{"componentChunkName":"component---src-templates-blog-post-js","path":"/botTelegraf/","result":{"data":{"markdownRemark":{"html":"<p>Telegraf est un framework node pour faire des bots sur Telegram</p>\n<!--more-->\n<h1>botfather</h1>\n<p>permet de creer un bot  : </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">I can help you create and manage Telegram bots. If you&#39;re new to the Bot API, please see the manual (https://core.telegram.org/bots).\n\nYou can control me by sending these commands:\n\n/newbot - create a new bot\n/mybots - edit your bots [beta]\n\nEdit Bots\n/setname - change a bot&#39;s name\n/setdescription - change bot description\n/setabouttext - change bot about info\n/setuserpic - change bot profile photo\n/setcommands - change the list of commands\n/deletebot - delete a bot\n\nBot Settings\n/token - generate authorization token\n/revoke - revoke bot access token\n/setinline - toggle inline mode (https://core.telegram.org/bots/inline)\n/setinlinegeo - toggle inline location requests (https://core.telegram.org/bots/inline#location-based-results)\n/setinlinefeedback - change inline feedback (https://core.telegram.org/bots/inline#collecting-feedback) settings\n/setjoingroups - can your bot be added to groups?\n/setprivacy - toggle privacy mode (https://core.telegram.org/bots#privacy-mode) in groups\n\nGames\n/mygames - edit your games (https://core.telegram.org/bots/games) [beta]\n/newgame - create a new game (https://core.telegram.org/bots/games)\n/listgames - get a list of your games\n/editgame - edit a game\n/deletegame - delete an existing game</code></pre></div>\n<h1>Telegraf</h1>\n<p>Pour installer :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add Telegraf</code></pre></div>\n<p>Un bot basique : </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Telegraf = require(&#39;telegraf&#39;)\nconst BOT_TOKEN=&quot;YOUR_TOKEN&quot;\n\nconst bot = new Telegraf(BOT_TOKEN)\nbot.start((ctx) =&gt; ctx.reply(&#39;Hello world&#39;))\nbot.help((ctx) =&gt; ctx.reply(&#39;Send me a sticker&#39;))\nbot.on(&#39;sticker&#39;, (ctx) =&gt; ctx.reply(&#39;üëç&#39;))\nbot.hears(&#39;hi&#39;, (ctx) =&gt; ctx.reply(&#39;Hey there&#39;))\nbot.launch()</code></pre></div>\n<h1>axios</h1>\n<p>dans l'idee je veux interoger une table airtable et renvoyer les resultats dans Telegram via inline_query.</p>\n<p>Ci dessous une fonction pour faire la recherche.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const axios = require(&#39;axios&#39;);\n\nconst getBaseUrl = () =&gt; {\n    return &quot;https://api.airtable.com/v0/CLEF/&quot;\n}\n\n\nconst axiosInstance = axios.create({\n    baseURL: getBaseUrl(),\n    timeout: 5000,\n    headers: {\n        Authorization: &#39;Bearer BEARER_TOKEN&#39;,\n        &#39;Content-Type&#39;: &#39;application/json&#39;\n\n    }\n})\n\nasync function query(req) {\n    var data = {}\n    console.log(&quot;start search ...&quot;)\n    // axiosInstance.get(&#39;/Livres?fields%5B%5D=Titre&amp;maxRecords=2&#39;)\n    await axiosInstance\n        .get(&#39;/Livres/recx6L9pmsg6hksrK&#39;)\n        .then((response) =&gt; {\n            data = {\n                &quot;Titre&quot;: response.data.fields.Titre,\n                &quot;Notes&quot;: response.data.fields.Notes\n            }\n        })\n        .catch( (e) =&gt; {\n            console.log(e)\n        })\n    return data\n}\n\nmodule.exports = {query}</code></pre></div>","frontmatter":{"title":"bot Telegram"}}},"pageContext":{"slug":"/botTelegraf/"}}}